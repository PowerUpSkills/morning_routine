import React, { useState, useRef, useEffect } from 'react';
import { Save, ChevronDown, ChevronRight, Plus, X, Check, Trash2, RotateCcw, Circle, CheckCircle } from 'lucide-react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogClose
} from "@/components/ui/dialog";

const defaultItems = [
  { id: 'd1', text: '💪 muscle training' },
  { id: 'd2', text: '🥗 organic food' },
  { id: 'd3', text: '💅 fingernails' },
  { id: 'd4', text: '📞 call dad' },
  { id: 'd5', text: '✍️ blogging' },
  { id: 'd6', text: '📧 Emails' },
  { id: 'd7', text: '👔 Iron Clothes' },
];

export default function TaskOrganizer() {
  const [tasks, setTasks] = useState({
    morning: [],
    job: [],
    reminder: [],
    putBack: []
  });
  
  const [activeTaskId, setActiveTaskId] = useState(null);
  const [newTask, setNewTask] = useState('');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isPutBackModalOpen, setIsPutBackModalOpen] = useState(false);
  const [pendingTask, setPendingTask] = useState('');
  const [isDefaultsOpen, setIsDefaultsOpen] = useState(false);
  const [selectedPutBackTask, setSelectedPutBackTask] = useState(null);
  const [draggedTask, setDraggedTask] = useState(null);
  
  const sectionsRef = {
    morning: useRef(null),
    job: useRef(null),
    reminder: useRef(null),
    putBack: useRef(null)
  };

  const handleAddTask = () => {
    if (newTask.trim()) {
      setPendingTask(newTask.trim());
      setIsModalOpen(true);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      handleAddTask();
    }
  };

  const handleAddDefaultTask = (defaultTask) => {
    setTasks(prev => ({
      ...prev,
      morning: [...prev.morning, defaultTask]
    }));
  };

  const handleTaskCategory = (category) => {
    setTasks(prev => ({
      ...prev,
      [category]: [...prev[category], { id: Date.now(), text: pendingTask }]
    }));
    setNewTask('');
    setIsModalOpen(false);
  };

  const handleTaskClick = (taskId) => {
    setActiveTaskId(prev => prev === taskId ? null : taskId);
  };

  const handleTaskAction = (action, task, section) => {
    switch (action) {
      case 'done':
      case 'delete':
        setTasks(prev => ({
          ...prev,
          [section]: prev[section].filter(t => t.id !== task.id)
        }));
        break;
      case 'putBack':
        setTasks(prev => ({
          ...prev,
          [section]: prev[section].filter(t => t.id !== task.id),
          putBack: [...prev.putBack, task]
        }));
        break;
    }
    setActiveTaskId(null);
  };

  const handleDragStart = (task, section) => {
    setDraggedTask({ ...task, sourceSection: section });
  };

  const handleDragOver = (e) => {
    e.preventDefault();
  };

  const handleDrop = (e, targetTask, targetSection) => {
    e.preventDefault();
    if (!draggedTask || (draggedTask.id === targetTask.id && draggedTask.sourceSection === targetSection)) return;

    setTasks(prev => {
      const newTasks = { ...prev };
      newTasks[draggedTask.sourceSection] = newTasks[draggedTask.sourceSection].filter(t => t.id !== draggedTask.id);
      const targetIndex = newTasks[targetSection].findIndex(t => t.id === targetTask.id);
      newTasks[targetSection] = [
        ...newTasks[targetSection].slice(0, targetIndex),
        { id: draggedTask.id, text: draggedTask.text },
        ...newTasks[targetSection].slice(targetIndex)
      ];
      return newTasks;
    });
  };

  const handlePutBackTaskClick = (task) => {
    setSelectedPutBackTask(task);
    setIsPutBackModalOpen(true);
  };

  const handlePutBackTaskCategory = (category) => {
    if (category === 'delete') {
      setTasks(prev => ({
        ...prev,
        putBack: prev.putBack.filter(t => t.id !== selectedPutBackTask.id)
      }));
    } else {
      setTasks(prev => ({
        ...prev,
        putBack: prev.putBack.filter(t => t.id !== selectedPutBackTask.id),
        [category]: [...prev[category], selectedPutBackTask]
      }));
    }
    setIsPutBackModalOpen(false);
    setSelectedPutBackTask(null);
  };

  const renderTask = (task, index, section) => (
    <div
      key={task.id}
      draggable
      onDragStart={() => handleDragStart(task, section)}
      onDragOver={handleDragOver}
      onDrop={(e) => handleDrop(e, task, section)}
      onClick={() => handleTaskClick(task.id)}
      className={`p-3 bg-white rounded-lg border ${
        activeTaskId === task.id ? 'border-blue-500 bg-blue-50' : 'border-gray-200'
      } cursor-pointer hover:bg-gray-100 transition-colors relative z-10`}
    >
      <div className="flex items-center justify-between">
        <div className="flex items-center">
          {activeTaskId === task.id ? (
            <CheckCircle size={20} className="mr-2 text-blue-500" />
          ) : (
            <Circle size={20} className="mr-2 text-gray-400" />
          )}
          <span className="mr-2 text-gray-500">{index + 1}.</span>
          {task.text}
        </div>
        {activeTaskId === task.id && (
          <div className="flex items-center gap-2">
            <button
              onClick={(e) => {
                e.stopPropagation();
                handleTaskAction('done', task, section);
              }}
              className="p-1 hover:bg-green-100 rounded-full transition-colors text-green-600"
              title="Mark as done"
            >
              <Check size={18} />
            </button>
            <button
              onClick={(e) => {
                e.stopPropagation();
                handleTaskAction('putBack', task, section);
              }}
              className="p-1 hover:bg-blue-100 rounded-full transition-colors text-blue-600"
              title="Put back"
            >
              <RotateCcw size={18} />
            </button>
            <button
              onClick={(e) => {
                e.stopPropagation();
                handleTaskAction('delete', task, section);
              }}
              className="p-1 hover:bg-red-100 rounded-full transition-colors text-red-600"
              title="Delete"
            >
              <Trash2 size={18} />
            </button>
          </div>
        )}
      </div>
    </div>
  );

  const renderSection = (section, title) => (
    <div className="bg-gray-50 p-4 rounded-lg">
      <h2 className="text-xl font-semibold mb-4 text-gray-700">{title}</h2>
      <div ref={sectionsRef[section]} className="space-y-4">
        {tasks[section].map((task, index) => renderTask(task, index, section))}
        {tasks[section].length === 0 && (
          <div className="text-center text-gray-400 py-4">
            Drag tasks here
          </div>
        )}
      </div>
    </div>
  );

  return (
    <div className="max-w-6xl mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4 text-gray-800">Task Organizer</h1>
      
      {/* Default Items Section */}
      <div className="mb-6 bg-white rounded-lg border border-gray-200 overflow-hidden">
        <button
          onClick={() => setIsDefaultsOpen(!isDefaultsOpen)}
          className="w-full px-4 py-2 flex items-center justify-between bg-gray-50 hover:bg-gray-100 transition-colors"
        >
          <span className="font-semibold">Default Tasks</span>
          {isDefaultsOpen ? <ChevronDown size={20} /> : <ChevronRight size={20} />}
        </button>
        
        {isDefaultsOpen && (
          <div className="p-4 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-2">
            {defaultItems.map(item => (
              <button
                key={item.id}
                onClick={() => {
                  const button = document.getElementById(`default-${item.id}`);
                  button.classList.add('scale-95', 'bg-green-100');
                  setTimeout(() => {
                    button.classList.remove('scale-95', 'bg-green-100');
                  }, 200);
                  handleAddDefaultTask(item);
                }}
                id={`default-${item.id}`}
                className="w-full flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-all duration-200 active:scale-95"
              >
                <span>{item.text}</span>
                <Plus size={16} className="text-gray-500" />
              </button>
            ))}
          </div>
        )}
      </div>

      {/* Task Input */}
      <div className="flex gap-2 mb-6">
        <input
          type="text"
          value={newTask}
          onChange={(e) => setNewTask(e.target.value)}
          onKeyPress={handleKeyPress}
          placeholder="Enter your task..."
          className="flex-1 p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
        <button
          onClick={handleAddTask}
          className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
        >
          Add Task
        </button>
      </div>

      {/* Main Sections Grid */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        {renderSection('morning', 'Morning Routine')}
        {renderSection('job', 'Job Tasks')}
        {renderSection('reminder', 'Reminders')}
      </div>

      {/* Put Back Section */}
      {tasks.putBack.length > 0 && (
        <div className="mt-6">
          {renderSection('putBack', 'Put Back Tasks')}
        </div>
      )}

      {/* Category Selection Modal */}
      <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Select Task Category</DialogTitle>
            <DialogClose className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100">
              <X className="h-4 w-4" />
            </DialogClose>
          </DialogHeader>
          <div className="grid grid-cols-3 gap-4 p-4">
            <button
              onClick={() => handleTaskCategory('morning')}
              className="p-4 text-center border rounded-lg hover:bg-gray-50 transition-colors"
            >
              Morning
            </button>
            <button
              onClick={() => handleTaskCategory('job')}
              className="p-4 text-center border rounded-lg hover:bg-gray-50 transition-colors"
            >
              Job
            </button>
            <button
              onClick={() => handleTaskCategory('reminder')}
              className="p-4 text-center border rounded-lg hover:bg-gray-50 transition-colors"
            >
              Reminder
            </button>
          </div>
        </DialogContent>
      </Dialog>

      {/* Put Back Task Modal */}
      <Dialog open={isPutBackModalOpen} onOpenChange={setIsPutBackModalOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Choose Action</DialogTitle>
            <DialogClose className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100">
              <X className="h-4 w-4" />
            </DialogClose>
          </DialogHeader>
          <div className="grid grid-cols-2 gap-4 p-4">
            <div className="col-span-2 mb-2">
              <h3 className="font-medium">Select category or delete task:</h3>
            </div>
            <button
              onClick={() => handlePutBackTaskCategory('morning')}
              className="p-4 text-center border rounded-lg hover:bg-gray-50 transition-colors"
            >
              Morning
            </button>
            <button
              onClick={() => handlePutBackTaskCategory('job')}
              className="p-4 text-center border rounded-lg hover:bg-gray-50 transition-colors"
            >
              Job
            </button>
            <button
              onClick={() => handlePutBackTaskCategory('reminder')}
              className="p-4 text-center border rounded-lg hover:bg-gray-50 transition-colors"
            >
              Reminder
            </button>
            <button
              onClick={() => handlePutBackTaskCategory('delete')}
              className="p-4 text-center border border-red-200 text-red-600 rounded-lg hover:bg-red-50 transition-colors"
            >
              Delete
            </button>
          </div>
        </DialogContent>
      </Dialog>

      {/* Screenshot Button */}
      {(tasks.morning.length > 0 || tasks.job.length > 0 || tasks.reminder.length > 0) && (
        <button
          onClick={() => alert('Use Command + Shift + 4 to capture a screenshot on your Mac!')}
          className="mt-6 flex items-center gap-2 px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors"
        >
          <Save size={20} />
          Save Screenshot
        </button>
      )}
    </div>
  );
}